package resource;

import io.swagger.annotations.ApiOperation;
import model.Transaction;
import model.TransactionReport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import service.TransactionService;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api")
public class TransactionPersistenceResource {

    @Autowired
    private TransactionService transactionService;

    @GetMapping("/transaction/{id}")
    @ApiOperation(value = "Finds transaction by id",
            notes = "Provide an id to look up specific transaction",
            response = Transaction.class)
    ResponseEntity<?> getTransaction(@PathVariable int id) {
        Optional<Transaction> transaction = transactionService.getTransaction(id);
        return transaction.map(value -> new ResponseEntity<>(value, HttpStatus.OK)).orElseGet(() -> new ResponseEntity<>(null, HttpStatus.NOT_FOUND));
    }

    @GetMapping("/transactions")
    @ApiOperation(value = "Returns all transactions",
            response = Transaction.class)
    ResponseEntity<List<Transaction>> getTransactions() {
        return transactionService.getAllTransactions().isEmpty() ?
                new ResponseEntity<>(Collections.emptyList(), HttpStatus.NOT_FOUND) :
                new ResponseEntity<>(transactionService.getAllTransactions(), HttpStatus.OK);
    }

    @PostMapping("/transaction")
    @ApiOperation(value = "Persists a specific transaction",
            notes = "Provide a transaction to persist. Do not set the \"id\" property manually, as it's autogenerated and it will have no effect!")
    ResponseEntity<?> addTransaction(@RequestBody Transaction transaction) {
        transactionService.addTransaction(transaction);
        return new ResponseEntity<>(null, HttpStatus.CREATED) ;
    }

    @DeleteMapping("/transaction/{id}")
    @ApiOperation(value = "Deletes a specific transaction",
            notes = "Provide a transaction to delete. Transactions are uniquely identified by \"id\" property")
    ResponseEntity<?> deleteTransaction(@PathVariable int id) {
        transactionService.deleteTransaction(id);
        return new ResponseEntity<>(null, HttpStatus.NO_CONTENT);
    }

    @GetMapping("/report/{cnp}")
    @ApiOperation(value = "Generates transaction report for a person",
            notes = "Finds all the transactions asociated with a uniquely identified person by CNP")
    ResponseEntity<TransactionReport> generateReport(@PathVariable long cnp) {
        return transactionService.getReportForCnp(cnp) == null ?
                new ResponseEntity<>(null, HttpStatus.NOT_FOUND) :
                new ResponseEntity<>(transactionService.getReportForCnp(cnp), HttpStatus.OK);
    }
}
